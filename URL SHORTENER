import hashlib

class URLShortener:
    def __init__(self):
        self.url_map = {}

    def shorten_url(self, original_url):
        # Generate a unique short code for the original URL using MD5 hash
        hash_object = hashlib.md5(original_url.encode())
        short_code = hash_object.hexdigest()[:8]  # Use the first 8 characters of the hash as the short code
        
        # Store the mapping between the short code and the original URL
        self.url_map[short_code] = original_url
        
        # Return the shortened URL
        return f"short.url/{short_code}"

    def get_original_url(self, short_code):
        # Retrieve the original URL based on the short code
        return self.url_map.get(short_code, None)

# Example usage
if __name__ == "__main__":
    url_shortener = URLShortener()

    # Shorten a URL
    original_url = "https://www.example.com"
    shortened_url = url_shortener.shorten_url(original_url)
    print(f"Shortened URL: {shortened_url}")

    # Retrieve the original URL using the short code
    short_code = shortened_url.split("/")[-1]
    retrieved_url = url_shortener.get_original_url(short_code)
    
    if retrieved_url:
        print(f"Original URL: {retrieved_url}")
    else:
        print("Invalid short code.")
